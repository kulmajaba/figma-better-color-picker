# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_VERSION: '18.x'
  DEPLOY_PATH: sites/colorpicker # Used as /home/<user>/sites/colorpicker

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Npm install and build
      run: |
        npm ci
        npm run build:ui --if-present
        npm test --if-present
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: ./dist
  
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app
    
    - name: Create a temp files for SSH key and known hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST_FINGERPRINT: ${{ secrets.SSH_HOST_FINGERPRINT }}
      run: |
        echo "::add-mask::$SSH_PRIVATE_KEY" > $RUNNER_TEMP/private_key
        echo "::add-mask::$SSH_HOST_FINGERPRINT" > $RUNNER_TEMP/known_hosts
        chmod 600 $RUNNER_TEMP/private_key
      

    - name: 'Deploy to VPS via SCP'
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
      run: |
        scp -i $RUNNER_TEMP/private_key -o UserKnownHostsFile=$RUNNER_TEMP/known_hosts ./index.html $SSH_USER@$SSH_HOST:/home/$SSH_USER/$DEPLOY_PATH/index.html
