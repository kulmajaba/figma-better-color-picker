import { FC } from 'react';

import { isArray } from '../../types';

/* Example
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="black"/>
</svg>
*/

type PathType = string | React.SVGProps<SVGPathElement>;

// TODO: Type this as an object of PathType | readonly PathType[] but keep the keyof declaration as accurate as possible
// As const not needed if this typing ins successful
const icons = {
  eyedropper:
    'M17.6594 5.41L18.5794 6.33L15.8894 9.02L14.9694 8.1L17.6594 5.41ZM17.6694 3C17.4094 3 17.1594 3.1 16.9594 3.29L13.8394 6.41L11.9094 4.5L10.4994 5.91L11.9194 7.33L2.99939 16.25V21H7.74939L16.6694 12.08L18.0894 13.5L19.4994 12.09L17.5794 10.17L20.6994 7.05C21.0994 6.65 21.0994 6.02 20.7094 5.63L18.3694 3.29C18.1694 3.1 17.9194 3 17.6694 3ZM6.91939 19L4.99939 17.08L13.0594 9.02L14.9794 10.94L6.91939 19Z',
  add: 'M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z',
  content_copy:
    'M16.5 1H4.5C3.4 1 2.5 1.9 2.5 3V17H4.5V3H16.5V1ZM19.5 5H8.5C7.4 5 6.5 5.9 6.5 7V21C6.5 22.1 7.4 23 8.5 23H19.5C20.6 23 21.5 22.1 21.5 21V7C21.5 5.9 20.6 5 19.5 5ZM19.5 21H8.5V7H19.5V21Z',
  delete:
    'M16 9V19H8V9H16ZM14.5 3H9.5L8.5 4H5V6H19V4H15.5L14.5 3ZM18 7H6V19C6 20.1 6.9 21 8 21H16C17.1 21 18 20.1 18 19V7Z',
  link: 'M17 7H13V9H17C18.65 9 20 10.35 20 12C20 13.65 18.65 15 17 15H13V17H17C19.76 17 22 14.76 22 12C22 9.24 19.76 7 17 7ZM11 15H7C5.35 15 4 13.65 4 12C4 10.35 5.35 9 7 9H11V7H7C4.24 7 2 9.24 2 12C2 14.76 4.24 17 7 17H11V15ZM8 11H16V13H8V11Z',
  link_off:
    'M14.39 11.0648L16 12.6748V11.0648H14.39ZM17 7.06481H13V8.9648H17C18.71 8.9648 20.1 10.3548 20.1 12.0648C20.1 13.3348 19.33 14.4348 18.23 14.9048L19.63 16.3048C21.05 15.4248 22 13.8548 22 12.0648C22 9.3048 19.76 7.06481 17 7.06481ZM2 4.3348L5.11 7.44481C3.29 8.1848 2 9.9748 2 12.0648C2 14.8248 4.24 17.0648 7 17.0648H11V15.1648H7C5.29 15.1648 3.9 13.7748 3.9 12.0648C3.9 10.4748 5.11 9.16481 6.66 8.99481L8.73 11.0648H8V13.0648H10.73L13 15.3348V17.0648H14.73L18.74 21.0748L20.15 19.6648L3.41 2.9248L2 4.3348Z',
  double_arrow: [
    'M15.25 5H10.75L15.75 12L10.75 19H15.25L20.25 12L15.25 5Z',
    'M8.25 5H3.75L8.75 12L3.75 19H8.25L13.25 12L8.25 5Z'
  ],
  close:
    'M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z',
  help_outline:
    'M11 18H13V16H11V18ZM12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM12 6C9.79 6 8 7.79 8 10H10C10 8.9 10.9 8 12 8C13.1 8 14 8.9 14 10C14 12 11 11.75 11 15H13C13 12.75 16 12.5 16 10C16 7.79 14.21 6 12 6Z',
  github_mark: {
    fillRule: 'evenodd',
    clipRule: 'evenodd',
    d: 'M11.9642 0.244904C5.34833 0.244904 0 5.63266 0 12.298C0 17.626 3.42686 22.1361 8.18082 23.7323C8.77518 23.8523 8.9929 23.473 8.9929 23.1539C8.9929 22.8745 8.97331 21.9167 8.97331 20.9187C5.64514 21.6372 4.95208 19.4819 4.95208 19.4819C4.41722 18.085 3.62473 17.726 3.62473 17.726C2.53543 16.9876 3.70408 16.9876 3.70408 16.9876C4.91241 17.0674 5.54645 18.2248 5.54645 18.2248C6.61592 20.0606 8.33927 19.5419 9.03257 19.2225C9.13151 18.4443 9.44865 17.9055 9.78539 17.6062C7.13094 17.3268 4.33812 16.2891 4.33812 11.6594C4.33812 10.3423 4.81322 9.26474 5.56604 8.4267C5.44727 8.12743 5.03118 6.88996 5.68506 5.23372C5.68506 5.23372 6.69527 4.91437 8.97306 6.47094C9.94827 6.20711 10.954 6.07289 11.9642 6.07176C12.9744 6.07176 14.0042 6.2116 14.9552 6.47094C17.2332 4.91437 18.2434 5.23372 18.2434 5.23372C18.8973 6.88996 18.481 8.12743 18.3622 8.4267C19.1349 9.26474 19.5904 10.3423 19.5904 11.6594C19.5904 16.2891 16.7976 17.3067 14.1233 17.6062C14.5592 17.9853 14.9353 18.7036 14.9353 19.8411C14.9353 21.4575 14.9158 22.7547 14.9158 23.1536C14.9158 23.473 15.1337 23.8523 15.7278 23.7326C20.4818 22.1358 23.9087 17.626 23.9087 12.298C23.9282 5.63266 18.5603 0.244904 11.9642 0.244904Z'
  }
} as const;

export type IconKey = keyof typeof icons;

interface Props {
  icon: IconKey;
  className?: string;
  rotateDeg?: number;
}

const RecursivePath: FC<{ children: PathType | readonly PathType[] }> = ({ children }) =>
  isArray(children) ? (
    <>
      {children.map((child, index) => (
        <RecursivePath key={index}>{child}</RecursivePath>
      ))}
    </>
  ) : typeof children === 'string' ? (
    <path d={children} />
  ) : (
    <path {...children} />
  );

const Icon: FC<Props> = ({ icon, className, rotateDeg }) => (
  <svg
    className={className}
    style={{ rotate: `${rotateDeg}deg` }}
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <RecursivePath>{icons[icon]}</RecursivePath>
  </svg>
);

export default Icon;
